{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Notes","props","data","map","note","text","App","useState","setData","useEffect","window","getData","localStorage","getItem","JSON","parse","class","id","style","width","type","placeholder","onClick","document","querySelector","value","trim","nextState","produce","draftState","push","setItem","stringify","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iPAmBMA,EAAQ,SAACC,GAAD,OAAWA,EAAMC,KAAKC,KAAI,SAAAC,GAAI,OAAI,8BAAMA,EAAKC,WAiC5C,SAASC,IAEtB,IACA,EAAwBC,mBADJ,CAAC,CAAEF,KAAM,sBAC7B,mBAAOH,EAAP,KAAaM,EAAb,KA4BA,OAVAC,qBAAU,WACR,GAAsB,qBAAXC,OAAwB,CACjC,IAAMC,EAAUC,aAAaC,QAAQ,QACrC,OACSL,EADO,KAAZG,GAA8B,OAAZA,EACLG,KAAKC,MAAMJ,GAEb,OAEhB,IAIL,+BACI,qCACE,uDACA,+HAEA,sBAAMK,MAAM,eAAZ,SACA,uBAAOA,MAAM,WAAWC,GAAG,YAAYC,MAAO,CAAEC,MAAO,OAASC,KAAK,OAAOC,YAAY,kGAExF,wBAAQC,QAAS,kBApCD,WAClB,IAAMjB,EAAOkB,SAASC,cAAc,cAAcC,MAAMC,OACxD,GAAIrB,EAAM,CACR,IAAMsB,EAAYC,YAAQ1B,GAAM,SAAA2B,GAC9BA,EAAWC,KAAK,CAAEzB,YAEpBkB,SAASC,cAAc,cAAcC,MAAQ,GAEvB,qBAAXf,QACTE,aAAamB,QAAQ,OAAQjB,KAAKkB,UAAUL,IAG9CnB,EAAQmB,IAwBeM,IAAvB,sBACA,cAAC,EAAD,CAAO/B,KAAMA,SC9FnB,IAYegC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvC,EAAD,MAEFiB,SAASuB,eAAe,SAM1BZ,M","file":"static/js/main.975ad152.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\nimport {useState, useEffect } from 'react'; //2 import the useState fuction from react\nimport {produce} from 'immer'; //3 import produce from immer library\n\n\n//Based on Akash Joshi's article on https://flexiple.com/react/react-hooks-learn-by-building-a-notes-app/\n\n/*\n-Step 1: create the functional component\n-Step 2: get useState Hook set up\n-Step 3: implement useState Hook \n-Step 4: implement the useEffect Hook\n*/\n\n/*\n-1 var Notes functions to accept an array as props input and returns the notes.\n-1 Iterates over the props array (data) using a map and returns the required divs.\n*/\nconst Notes = (props) => props.data.map(note => <div>{note.text}</div>);\n\n/*\n-1 var initialData added to default function \n-1 var initialData is an array containing the initial text.\n-2 useState is a Hook that lets you add React state to function components. \n-2 var data will access useState Hook with var initialData as initial argument.\n-2 var setDate will update var data, thus updating current useState argument. \n-3 add handleClick function to check if text input is empty.\n-3 var text based on value found by querySelector in the div-id '#noteinput'\n-3 var nextState uses the produce function that takes 2 arguments... \n    (baseState, draftState which drafts changes to the nextState)\n-3 import produce from the immer library.\n-3 This new state is set via setData(nextState). We have also cleared the text input field. \n-3 add 'noteinput' to input element id\n-4 useEffect tells React that your component needs to do something after each render.\n-4 useEffect hook takes a function as input and a variable it is linked to upon each render. \n-4 useEffeck ensures typeOf is not 'undefined', \n  -proceeds to get data from localStorage,\n  -and then checks whether it actually exists,\n  -useEffect linkedVar is set to a static value 0 to run only once.\n-4 add if statement in handleClick to push newly created notes to the localStorage too. \n*/\n\n/* Returning:\n-1 return Notes component to display the var data values\n-2 return elements input field and a button to app to add more notes.\n-2 when returning mult components at once they are wrapped with <> </>. \n-3 call the handleClick function inside the button element via the onClick API.\n-4 useEffect either returns setData by parsing through JSON file.\n-4 useEffect returns setDate as an empty array waiting for new input.\n*/\n\nexport default function App() {\n\n  const initialData = [{ text: 'Loading Data ...' }];\n  const [data, setData] = useState(initialData);\n\n  const handleClick = () => {\n    const text = document.querySelector('#noteinput').value.trim();\n    if (text) {\n      const nextState = produce(data, draftState => {\n        draftState.push({ text });\n      });\n      document.querySelector('#noteinput').value = '';\n\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('data', JSON.stringify(nextState));\n      }\n\n      setData(nextState);\n    }\n  };\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const getData = localStorage.getItem('data');\n      if (getData !== '' && getData !== null) {\n        return setData(JSON.parse(getData));\n      }\n      return setData([]);\n    }\n  }, []);\n\n  return (\n  \n<body>\n    <>\n      <h3>The Note Reminder App</h3>\n      <h5>Step 1: Click input text field and select a reminder. Step 2: Click Add note to set reminder.</h5>   \n\n      <form class=\"w3-container\">\n      <input class=\"w3-input\" id=\"noteinput\" style={{ width: '70%' }} type=\"text\" placeholder=\"Enter new note and Press ENTER to be stored in memory. Press Add Note to display reminder. \" />\n      </form>   \n      <button onClick={() => handleClick()}>Add note</button>\n      <Notes data={data} />\n       </>\n </body>\n  );\n};\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}